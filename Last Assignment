#include<stdio.h>
#include<stdlib.h>

// Structure for a binary tree node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* newNode(int data) {
    struct Node* node = (struct Node*)malloc(sizeof(struct Node));
    node->data = data;
    node->left = NULL;
    node->right = NULL;
    return node;
}

// Function to find index of value in arr[start..end]
int search(int arr[], int start, int end, int value) {
    int i;
    for (i = start; i <= end; i++) {
        if (arr[i] == value)
            return i;
    }
    return -1;
}

// Recursive function to construct BST from postorder and inorder traversals
struct Node* buildTree(int in[], int post[], int inStart, int inEnd, int* postIndex) {
    if (inStart > inEnd)
        return NULL;

    // Pick current node from postorder traversal using postIndex
    struct Node* node = newNode(post[*postIndex]);
    (*postIndex)--;

    // If this node has no children then return
    if (inStart == inEnd)
        return node;

    // Else find the index of this node in inorder traversal
    int inIndex = search(in, inStart, inEnd, node->data);

    // Using index in inorder traversal, construct left and right subtrees
    node->right = buildTree(in, post, inIndex + 1, inEnd, postIndex);
    node->left = buildTree(in, post, inStart, inIndex - 1, postIndex);

    return node;
}

// Function to construct BST from inorder and postorder traversals
struct Node* bst_construct(int in[], int post[], int n) {
    int postIndex = n - 1;
    return buildTree(in, post, 0, n - 1, &postIndex);
}

// Function to traverse the tree in breadth-first-search (DFS) and print nodes
void breadth_first_search(struct Node* root) {
    if (root == NULL)
        return;

    // Create an empty queue for BFS
    struct Node** queue = (struct Node**)malloc(sizeof(struct Node*) * 1000);
    int front = -1, rear = -1;

    // Enqueue root and initialize height
    queue[++rear] = root;

    while (front < rear) {
        // Dequeue a node from queue
        struct Node* temp_node = queue[++front];
        printf("%d ", temp_node->data);

        // Enqueue left child
        if (temp_node->left != NULL)
            queue[++rear] = temp_node->left;

        // Enqueue right child
        if (temp_node->right != NULL)
            queue[++rear] = temp_node->right;
    }
}

int main() {
    int in[] = {5, 10, 15, 20, 25, 30, 45};
    int post[] = {5, 15, 10, 25, 45, 30, 20};
    int n = sizeof(in) / sizeof(in[0]);

    struct Node* root = bst_construct(in, post, n);

    printf("Breadth-first-search traversal of the constructed BST:\n");
    breadth_first_search(root);

    return 0;
}
